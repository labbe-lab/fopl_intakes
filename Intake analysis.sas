****************************************DATA SET UP********************************;
****4 CATEGORIZATION CODE LEVEL: 0 IS NO WL, 1 IS >=1WL, 2 IS EXEMPT, 4 IS RESTAURANT FOODS;******;
**PREPARE ID FILE***;
LIBNAME INLIB "INSERT_FID FILE";
DATA WORK.FID_FRL; SET INLIB.FID_FRL; RUN;

DATA FID_FRL; SET FID_FRL; 
IF (FIDDPREP = 2 OR FIDDCON = 3 OR FIDDCON = 4 OR FIDDCON = 5 OR FIDDCON = 6 OR FIDDCON = 12) AND FID_RC1 <999999 THEN FID_CDE1=FID_RC1;
ELSE FID_CDE1=FID_CDE; RUN;

DATA CHECK; SET FID_FRL; 
IF FIDDPREP=2 THEN OUTPUT CHECK; RUN; 

**MERGE WITH CNF FILE - CODED FOR FOPL***;
PROC IMPORT DATAFILE= "CNF FILE"
DBMS=XLSX REPLACE OUT=WL;
GETNAMES=YES;
RUN;
DATA WL2; SET WL (KEEP = FID_CDE1 TRA_CAT TRA_ITEM FOP_SOD_CG1 FOP_SUG_CG1 FOP_SATFAT_CG1 WL_CODED_CG1 TOTAL_NO_WL_CG1 FOP_SOD_CG2 FOP_SUG_CG2 FOP_SFA_CG2 WL_CODED_CG2 TOTAL_NO_WL_CG2 ADDED_SUGAR FREE_SUGAR); RUN; 

PROC SORT DATA=WL2; BY FID_CDE1; RUN;
PROC SORT DATA=FID_FRL; BY FID_CDE1; RUN;

DATA FIDFRL_WL; MERGE FID_FRL (IN=A) WL2; BY FID_CDE1; IF A; RUN;

*DELETE EXC FOODS*;
DATA FIDFRL_WL; SET FIDFRL_WL;
IF WL_CODED_CG2=0 THEN DELETE; RUN; 
*741909-734420 = 7489 removed*;

**REMOVEACCURATE SOD/SUG/SATFAT/WTG/FREESUG**;
DATA FIDFRL_WL; SET FIDFRL_WL; 
IF FID_SOD>10000 THEN FID_SOD="."; 
IF FID_SUG>10000 THEN FID_SUG="."; 
IF FID_FAS>10000 THEN FID_FAS="."; 
IF FID_EKC>10000 THEN FID_EKC="."; 
IF FID_FREESUG >10000 THEN FID_FREESUG = "."; 
IF FID_WTG >10000 THEN FID_WTG = ".";
RUN; 

PROC SORT DATA=FIDFRL_WL; BY ADM_RNO; RUN;
PROC MEANS DATA= FIDFRL_WL NOPRINT;
VAR FID_EKC; BY ADM_RNO; OUTPUT OUT = TOTALKCAL SUM=KCALPERPERSON; RUN;

DATA FIDFRL_WL; MERGE FIDFRL_WL (IN=A) TOTALKCAL; BY ADM_RNO; IF A; RUN;
DATA FIDFRL_WL; SET FIDFRL_WL (DROP = _TYPE_ _FREQ_); RUN; 

DATA FIDFRL_WL; SET FIDFRL_WL;
FID_FREESUG = FREE_SUGAR/100*FID_WTG;
FID_ADDSUG = ADDED_SUGAR/100*FID_WTG; 
RUN;

**RE-CODE WL TO HAVE 3 LEVELS...NA SHOULD HAVE BEEN REMOVED WITH MISSING INFO***;
DATA FIDFRL_WL; SET FIDFRL_WL;
IF FOP_SUG_CG2="NS0" THEN FOP_SUG2 = 2;
ELSE IF FOP_SUG_CG2 = "NA" OR FOP_SUG_CG2 =0 THEN FOP_SUG2 = 0;
ELSE IF FOP_SUG_CG2=1 THEN FOP_SUG2 = 1;
RUN;
DATA FIDFRL_WL; SET FIDFRL_WL;
IF FOP_SOD_CG2="NS0" THEN FOP_SOD2 = 2;
ELSE IF FOP_SOD_CG2 = "NA" OR FOP_SOD_CG2=0  THEN FOP_SOD2 = 0;
ELSE IF FOP_SOD_CG2=1 THEN FOP_SOD2 = 1;
RUN;
DATA FIDFRL_WL; SET FIDFRL_WL;
IF FOP_SFA_CG2="NS0" THEN FOP_SATFAT2 = 2;
ELSE IF FOP_SFA_CG2= "NA" OR FOP_SFA_CG2 = 0  THEN FOP_SATFAT2 = 0;
ELSE IF FOP_SFA_CG2=1 THEN FOP_SATFAT2 = 1;
RUN;

*** FAFH (ACCORDING TO POLSKY ET AL FIDDCON DEFINITION)**;
DATA FIDFRL_WL; SET FIDFRL_WL; 
IF FIDDPREP = 2 OR FIDDCON = 3 OR FIDDCON = 4 OR FIDDCON = 5 OR FIDDCON = 6 OR FIDDCON = 12 THEN FOP_SOD2=4; 
IF FIDDPREP = 2 OR FIDDCON = 3 OR FIDDCON = 4 OR FIDDCON = 5 OR FIDDCON = 6 OR FIDDCON = 12 THEN FOP_SUG2=4;  
IF FIDDPREP = 2 OR FIDDCON = 3 OR FIDDCON = 4 OR FIDDCON = 5 OR FIDDCON = 6 OR FIDDCON = 12 THEN FOP_SATFAT2=4; 
IF FIDDPREP = 2 OR FIDDCON = 3 OR FIDDCON = 4 OR FIDDCON = 5 OR FIDDCON = 6 OR FIDDCON = 12 THEN WL_CODED_CG2=99; RUN;


*************ADDING UP NUTRIENTS************;
************SATFAT***********;
PROC SORT DATA = FIDFRL_WL; BY ADM_RNO; RUN;
DATA FID_FASWL_0 FID_FASWL_1; SET FIDFRL_WL;
IF FOP_SATFAT2 = 0 THEN OUTPUT FID_FASWL_0;
IF FOP_SATFAT2 = 1 THEN OUTPUT FID_FASWL_1; RUN;

DATA FID_FASWL_2 FID_FASWL_4; SET FIDFRL_WL;
IF FOP_SATFAT2 = 2 THEN OUTPUT FID_FASWL_2;
IF FOP_SATFAT2 = 4 THEN OUTPUT FID_FASWL_4;RUN;

PROC MEANS DATA= FID_FASWL_0 NOPRINT; 
VAR FID_FAS; BY ADM_RNO; OUTPUT OUT = FASWL0 SUM=FASBYWL0; RUN;
PROC MEANS DATA= FID_FASWL_1 NOPRINT; 
VAR FID_FAS; BY ADM_RNO; OUTPUT OUT = FASWL1 SUM=FASBYWL1; RUN;
PROC MEANS DATA= FID_FASWL_2 NOPRINT; 
VAR FID_FAS; BY ADM_RNO; OUTPUT OUT = FASWL2 SUM=FASBYEXWL; RUN;
PROC MEANS DATA= FID_FASWL_4 NOPRINT; 
VAR FID_FAS; BY ADM_RNO; OUTPUT OUT = FASWL4 SUM=FASRES; RUN;

DATA FASWL0; SET FASWL0 (DROP = _TYPE_ _FREQ_); RUN;
DATA FASWL1; SET FASWL1 (DROP = _TYPE_ _FREQ_); RUN;
DATA FASWL2; SET FASWL2 (DROP = _TYPE_ _FREQ_); RUN;

**********SODIUM*******;
PROC SORT DATA = FIDFRL_WL; BY ADM_RNO; RUN;
DATA FID_SODWL_0 FID_SODWL_1; SET FIDFRL_WL;
IF FOP_SOD2 = 0 THEN OUTPUT FID_SODWL_0;
IF FOP_SOD2 = 1 THEN OUTPUT FID_SODWL_1; RUN;
DATA FID_SODWL_2 FID_SODWL_4; SET FIDFRL_WL;
IF FOP_SOD2 = 2 THEN OUTPUT FID_SODWL_2; 
IF FOP_SOD2 = 4 THEN OUTPUT FID_SODWL_4; RUN;

PROC MEANS DATA= FID_SODWL_0 NOPRINT; 
VAR FID_SOD; BY ADM_RNO; OUTPUT OUT = SODWL0 SUM=SODBYWL0; RUN;
PROC MEANS DATA= FID_SODWL_1 NOPRINT; 
VAR FID_SOD; BY ADM_RNO; OUTPUT OUT = SODWL1 SUM=SODBYWL1; RUN;
PROC MEANS DATA= FID_SODWL_2 NOPRINT; 
VAR FID_SOD; BY ADM_RNO; OUTPUT OUT = SODWL2 SUM=SODBYEXWL; RUN;
PROC MEANS DATA= FID_SODWL_4 NOPRINT; 
VAR FID_SOD; BY ADM_RNO; OUTPUT OUT = SODWL4 SUM=SODRES; RUN;

DATA SODWL0; SET SODWL0 (DROP = _TYPE_ _FREQ_); RUN;
DATA SODWL1; SET SODWL1 (DROP = _TYPE_ _FREQ_); RUN;
DATA SODWL2; SET SODWL2 (DROP = _TYPE_ _FREQ_); RUN;
DATA SODWL4; SET SODWL4 (DROP = _TYPE_ _FREQ_); RUN;


**********TOTAL SUGARS*******;
PROC SORT DATA = FIDFRL_WL; BY ADM_RNO; RUN;
DATA FID_SUGWL_0 FID_SUGWL_1; SET FIDFRL_WL;
IF FOP_SUG2 = 0 THEN OUTPUT FID_SUGWL_0;
IF FOP_SUG2 = 1 THEN OUTPUT FID_SUGWL_1; RUN;
DATA FID_SUGWL_2 FID_SUGWL_4; SET FIDFRL_WL;
IF FOP_SUG2 = 2 THEN OUTPUT FID_SUGWL_2;
IF FOP_SUG2 = 4 THEN OUTPUT FID_SUGWL_4; RUN;

PROC MEANS DATA= FID_SUGWL_0 NOPRINT; 
VAR FID_SUG; BY ADM_RNO; OUTPUT OUT = SUGWL0 SUM=SUGBYWL0; RUN;
PROC MEANS DATA= FID_SUGWL_1 NOPRINT; 
VAR FID_SUG; BY ADM_RNO; OUTPUT OUT = SUGWL1 SUM=SUGBYWL1; RUN;
PROC MEANS DATA= FID_SUGWL_2 NOPRINT; 
VAR FID_SUG; BY ADM_RNO; OUTPUT OUT = SUGWL2 SUM=SUGBYEXWL;
PROC MEANS DATA= FID_SUGWL_4 NOPRINT; 
VAR FID_SUG; BY ADM_RNO; OUTPUT OUT = SUGWL4 SUM=SUGRES; RUN;

DATA SUGWL0; SET SUGWL0 (DROP = _TYPE_ _FREQ_); RUN;
DATA SUGWL1; SET SUGWL1 (DROP = _TYPE_ _FREQ_); RUN;
DATA SUGWL2; SET SUGWL2 (DROP = _TYPE_ _FREQ_); RUN;
DATA SUGWL4; SET SUGWL4 (DROP = _TYPE_ _FREQ_); RUN;

***************FREESUG************;
DATA FID_FREESUGWL_0 FID_FREESUGWL_1; SET FIDFRL_WL;
IF FOP_SUG2 = 0 THEN OUTPUT FID_FREESUGWL_0;
IF FOP_SUG2 = 1 THEN OUTPUT FID_FREESUGWL_1; RUN;
DATA FID_FREESUGWL_2 FID_FREESUGWL_4; SET FIDFRL_WL;
IF FOP_SUG2 = 2 THEN OUTPUT FID_FREESUGWL_2; 
IF FOP_SUG2 = 4 THEN OUTPUT FID_FREESUGWL_4; RUN;

PROC SORT DATA=FID_FREESUGWL_0; BY ADM_RNO; RUN;
PROC MEANS DATA= FID_FREESUGWL_0 NOPRINT; 
VAR FID_FREESUG; BY ADM_RNO; OUTPUT OUT = FREESUGWL0 SUM=FREESUGBYWL0; RUN;
PROC MEANS DATA= FID_FREESUGWL_1 NOPRINT; 
VAR FID_FREESUG; BY ADM_RNO; OUTPUT OUT = FREESUGWL1 SUM=FREESUGBYWL1; RUN;
PROC MEANS DATA= FID_FREESUGWL_2 NOPRINT; 
VAR FID_FREESUG; BY ADM_RNO; OUTPUT OUT = FREESUGWL2 SUM=FREESUGBYEXWL; RUN;
PROC MEANS DATA= FID_FREESUGWL_4 NOPRINT; 
VAR FID_FREESUG; BY ADM_RNO; OUTPUT OUT = FREESUGWL4 SUM=FREESUGRES; RUN;

DATA FREESUGWL0; SET FREESUGWL0 (DROP = _TYPE_ _FREQ_); RUN;
DATA FREESUGWL1; SET FREESUGWL1 (DROP = _TYPE_ _FREQ_); RUN;
DATA FREESUGWL2; SET FREESUGWL2 (DROP = _TYPE_ _FREQ_); RUN;
DATA FREESUGWL4; SET FREESUGWL4 (DROP = _TYPE_ _FREQ_); RUN;

******ENERGY**********;
DATA FIDFRL_WL; SET FIDFRL_WL; 
IF WL_CODED_CG2 = 99  THEN WL_CODED2 = 99;
ELSE IF WL_CODED_CG2 < 3  THEN WL_CODED2 = 0;
ELSE IF WL_CODED_CG2 >= 3 THEN WL_CODED2 = 1; RUN;

PROC SORT DATA=FIDFRL_WL; BY WL_CODED2; RUN;
PROC FREQ DATA=FIDFRL_WL; TABLE WL_CODED2; RUN;

DATA FID_WL_KCAL0 FID_WL_KCAL1 FID_WL_KCAL99; SET FIDFRL_WL;
IF WL_CODED2 = 0 THEN OUTPUT FID_WL_KCAL0;
IF WL_CODED2 = 1 THEN OUTPUT FID_WL_KCAL1; 
IF WL_CODED2 = 99 THEN OUTPUT FID_WL_KCAL99; RUN;

PROC MEANS DATA= FID_WL_KCAL0 NOPRINT; 
VAR FID_EKC; BY ADM_RNO; OUTPUT OUT = WLKCAL0 SUM=KCALBYWL0; RUN;
PROC MEANS DATA= FID_WL_KCAL1 NOPRINT; 
VAR FID_EKC; BY ADM_RNO; OUTPUT OUT = WLKCAL1 SUM=KCALBYWL1; RUN;
PROC MEANS DATA= FID_WL_KCAL99 NOPRINT; 
VAR FID_EKC; BY ADM_RNO; OUTPUT OUT = WLKCAL99 SUM=KCALRES; RUN;
DATA WLKCAL0; SET WLKCAL0 (DROP = _TYPE_ _FREQ_); RUN;
DATA WLKCAL1; SET WLKCAL1 (DROP = _TYPE_ _FREQ_); RUN;
DATA WLKCAL99; SET WLKCAL99 (DROP = _TYPE_ _FREQ_); RUN;

DATA FID_EXEMPT FID_0WL FID_1WL FID_2WL FID_3WL; SET FIDFRL_WL;
IF WL_CODED_CG2 = 1 THEN OUTPUT FID_EXEMPT;
IF WL_CODED_CG2 = 2 THEN OUTPUT FID_0WL;
IF WL_CODED_CG2 = 3 THEN OUTPUT FID_1WL;
IF WL_CODED_CG2 = 4 THEN OUTPUT FID_2WL;
IF WL_CODED_CG2 = 5 THEN OUTPUT FID_3WL; RUN;
PROC MEANS DATA= FID_EXEMPT NOPRINT; 
VAR FID_EKC; BY ADM_RNO; OUTPUT OUT = WLEXEMPTKCAL SUM=KCALEXEMPTWL; RUN;
PROC MEANS DATA= FID_0WL NOPRINT; 
VAR FID_EKC; BY ADM_RNO; OUTPUT OUT = WL0KCAL SUM=KCAL0WL; RUN;
PROC MEANS DATA= FID_1WL NOPRINT; 
VAR FID_EKC; BY ADM_RNO; OUTPUT OUT = WL1KCAL SUM=KCAL1WL; RUN;
PROC MEANS DATA= FID_2WL NOPRINT; 
VAR FID_EKC; BY ADM_RNO; OUTPUT OUT = WL2KCAL SUM=KCAL2WL; RUN;
PROC MEANS DATA= FID_3WL NOPRINT; 
VAR FID_EKC; BY ADM_RNO; OUTPUT OUT = WL3KCAL SUM=KCAL3WL; RUN;
DATA WLEXEMPTKCAL; SET WLEXEMPTKCAL (DROP = _TYPE_ _FREQ_); RUN;
DATA WL0KCAL; SET WL0KCAL(DROP = _TYPE_ _FREQ_); RUN;
DATA WL1KCAL; SET WL1KCAL(DROP = _TYPE_ _FREQ_); RUN;
DATA WL2KCAL; SET WL2KCAL (DROP = _TYPE_ _FREQ_); RUN;
DATA WL3KCAL; SET WL3KCAL (DROP = _TYPE_ _FREQ_); RUN;



****************************************************************************;;
****************************************************************************;;
****************************************************************************;;
****************************************************************************;;
****************************************************************************;;
****************************************************************************;;
****************************************************************************;;
****COMBINE TO EER (I.E., HS FILE) WITH MISREPORTER STATUS, ETC.***;
LIBNAME INLIB "INSERT EER FILE";
DATA WORK.EER_WL; SET INLIB.EERFINAL_ADULTS; RUN;

DATA EER_WL; SET EER_WL;
IF WHC_05 = 1 THEN DELETE; RUN;

LIBNAME INLIB "INSERT TOTAL ENERGY ADDED UP PER PERSON";
DATA WORK.TOTALKCAL; SET INLIB.TOTALKCAL; RUN;
DATA TOTALKCAL; SET TOTALKCAL (DROP = _TYPE_ _FREQ_); RUN;

PROC SORT DATA=TOTALKCAL; BY ADM_RNO; RUN;
DATA EER_WL; MERGE EER_WL (IN=A) TOTALKCAL; BY ADM_RNO; IF A; RUN;

****MERGE BOOSTRAPPING FILE*****;
LIBNAME INLIB "INSERT BOOSTRAPPING";
DATA WORK.B5_COPY; SET INLIB.B5; RUN;

PROC SORT DATA=EER_WL; BY ADM_RNO; RUN;
PROC SORT DATA=B5_COPY; BY ADM_RNO; RUN;
DATA EER_WL; MERGE EER_WL (IN=A) B5_COPY; BY ADM_RNO; IF A; RUN; 

PROC SORT DATA=FIDFRL_WL; BY ADM_RNO; RUN;
PROC MEANS DATA= FIDFRL_WL NOPRINT;
VAR FID_FREESUG; BY ADM_RNO; OUTPUT OUT = TOTALFREESUG SUM=FSDDFRSUG; RUN;
PROC SORT  DATA= TOTALFREESUG; BY ADM_RNO; RUN;
PROC SORT DATA=EER_WL; BY ADM_RNO; RUN;
DATA TOTALFREESUG; SET TOTALFREESUG (DROP=_TYPE_ _FREQ_); RUN;
DATA EER_WL; MERGE EER_WL (IN=A) TOTALFREESUG; BY ADM_RNO; IF A; RUN; 
DATA EER_WL; SET EER_WL; 
IF FSDDFRSUG="." THEN FSDDFRSUG = 0; RUN;

*************SATFAT IN EER FILE**;
PROC SORT DATA=FASWL0; BY ADM_RNO; RUN;
PROC SORT DATA=EER_WL; BY ADM_RNO; RUN;
DATA EER_WL; MERGE EER_WL (IN=A)FASWL0; BY ADM_RNO; IF A; RUN;
PROC SORT DATA=FASWL1; BY ADM_RNO; RUN;
DATA EER_WL; MERGE EER_WL (IN=A)FASWL1; BY ADM_RNO; IF A; RUN;
PROC SORT DATA=FASWL1; BY ADM_RNO; RUN;
DATA EER_WL; MERGE EER_WL  (IN=A)FASWL2; BY ADM_RNO; IF A; RUN;
PROC SORT DATA=FASWL4; BY ADM_RNO; RUN;
DATA EER_WL; MERGE EER_WL (IN=A)FASWL4; BY ADM_RNO; IF A; RUN;

DATA EER_WL; SET EER_WL;
IF FASBYWL0="." THEN FASBYWL0=0; 
IF FASBYWL1="." THEN FASBYWL1=0; 
IF FASBYEXWL="." THEN FASBYEXWL=0;
IF FASRES="." THEN FASRES=0; RUN;

DATA EER_WL; SET EER_WL;
FASWL0TOKCAL = FASBYWL0*9/FSDDEKC;
FASWL1TOKCAL = FASBYWL1*9/FSDDEKC; 
FASEXWLTOKCAL = FASBYEXWL*9/FSDDEKC; 
FASRESTOKCAL = FASRES*9/FSDDEKC; RUN;

*ABSOLUTE INTAKE COMPARED TO HS TOTAL SAT FAT INTAKE*;
DATA EER_WL; SET EER_WL;
FASWL0PROP = FASBYWL0/(FASBYWL0+FASBYWL1+FASBYEXWL+FASRES);
FASWL1PROP = FASBYWL1/(FASBYWL0+FASBYWL1+FASBYEXWL+FASRES);
FASEXWLPROP = FASBYEXWL/(FASBYWL0+FASBYWL1+FASBYEXWL+FASRES);
FASRESPROP = FASRES/(FASBYWL0+FASBYWL1+FASBYEXWL+FASRES); RUN;

DATA EER_WL; SET EER_WL;
TOTALFAS = FASBYWL0+FASBYWL1+FASBYEXWL+FASRES; RUN;

DATA EER_WL; SET EER_WL;
TOTALFASTOKCAL = TOTALFAS*9/FSDDEKC;RUN;

DATA ZEROFAS; SET EER_WL; 
IF TOTALFAS = 0 THEN OUTPUT ZEROFAS; RUN;


**ENERGY**; 
PROC SORT DATA=WLKCAL0; BY ADM_RNO; RUN;
PROC SORT DATA=WLKCAL1; BY ADM_RNO; RUN;
PROC SORT DATA=WLKCAL99; BY ADM_RNO; RUN;
PROC SORT DATA=WLEXEMPTKCAL; BY ADM_RNO; RUN;
PROC SORT DATA=WL0KCAL; BY ADM_RNO; RUN;
PROC SORT DATA=WL1KCAL; BY ADM_RNO; RUN;
PROC SORT DATA=WL2KCAL; BY ADM_RNO; RUN;
PROC SORT DATA=WL3KCAL; BY ADM_RNO; RUN;
PROC SORT DATA=EER_WL; BY ADM_RNO; RUN;
DATA EER_WL; MERGE EER_WL (IN=A) WLKCAL0; BY ADM_RNO; IF A; RUN;
DATA EER_WL; MERGE EER_WL (IN=A) WLKCAL1; BY ADM_RNO; IF A; RUN;
DATA EER_WL; MERGE EER_WL (IN=A) WLKCAL99; BY ADM_RNO; IF A; RUN;
DATA EER_WL; MERGE EER_WL (IN=A) WLEXEMPTKCAL; BY ADM_RNO; IF A; RUN;
DATA EER_WL; MERGE EER_WL (IN=A) WL0KCAL; BY ADM_RNO; IF A; RUN;
DATA EER_WL; MERGE EER_WL (IN=A) WL1KCAL; BY ADM_RNO; IF A; RUN;
DATA EER_WL; MERGE EER_WL (IN=A) WL2KCAL; BY ADM_RNO; IF A; RUN;
DATA EER_WL; MERGE EER_WL(IN=A) WL3KCAL; BY ADM_RNO; IF A; RUN;

DATA EER_WL; SET EER_WL;
IF KCALBYWL0="." THEN KCALBYWL0=0; 
IF KCALBYWL1="." THEN KCALBYWL1=0;
IF KCALRES="." THEN KCALRES=0;
IF KCALEXEMPTWL="." THEN KCALEXEMPTWL=0;
IF KCAL0WL="." THEN KCAL0WL=0;
IF KCAL1WL="." THEN KCAL1WL=0;
IF KCAL2WL="." THEN KCAL2WL=0;
IF KCAL3WL="." THEN KCAL3WL=0; RUN;

DATA EER_WL; SET EER_WL;
KCALBYWL0PROP = KCALBYWL0/(KCALBYWL0+KCALBYWL1+KCALRES); 
KCALBYWL1PROP = KCALBYWL1/(KCALBYWL0+KCALBYWL1+KCALRES); 
KCALRESPROP = KCALRES/(KCALBYWL0+KCALBYWL1+KCALRES); 
KCALEXEMPTWLPROP = KCALEXEMPTWL/(KCALBYWL0+KCALBYWL1+KCALRES); 
KCAL0WLPROP = KCAL0WL/(KCALBYWL0+KCALBYWL1+KCALRES); 
KCAL1WLPROP = KCAL1WL/(KCALBYWL0+KCALBYWL1+KCALRES);
KCAL2WLPROP = KCAL2WL/(KCALBYWL0+KCALBYWL1+KCALRES);
KCAL3WLPROP = KCAL3WL/(KCALBYWL0+KCALBYWL1+KCALRES); RUN;


*********SODIUM***********;
PROC SORT DATA=SODWL0; BY ADM_RNO; RUN;
PROC SORT DATA=EER_WL; BY ADM_RNO; RUN;
DATA EER_WL; MERGE EER_WL (IN=A) SODWL0; BY ADM_RNO; IF A; RUN;
PROC SORT DATA=SODWL1; BY ADM_RNO; RUN;
DATA EER_WL; MERGE EER_WL (IN=A) SODWL1; BY ADM_RNO; IF A; RUN;
PROC SORT DATA=SODWL2; BY ADM_RNO; RUN;
DATA EER_WL; MERGE EER_WL(IN=A) SODWL2; BY ADM_RNO; IF A; RUN;
PROC SORT DATA=SODWL4; BY ADM_RNO; RUN;
DATA EER_WL; MERGE EER_WL(IN=A) SODWL4; BY ADM_RNO; IF A; RUN;

DATA EER_WL; SET EER_WL;
IF SODBYWL0="." THEN SODBYWL0=0; 
IF SODBYWL1="." THEN SODBYWL1=0; 
IF SODBYEXWL="." THEN SODBYEXWL=0;
IF SODRES="." THEN SODRES=0;RUN;

DATA EER_WL; SET EER_WL;
TOTALSOD = SODBYWL0 + SODBYWL1 + SODBYEXWL +SODRES; 
SODBYWL0PROP = SODBYWL0/TOTALSOD;
SODBYWL1PROP = SODBYWL1/TOTALSOD; 
SODBYEXWLPROP = SODBYEXWL/TOTALSOD;
SODRESPROP = SODRES/TOTALSOD; RUN; 

*************TOTAL SUG**********;
PROC SORT DATA=SUGWL0; BY ADM_RNO; RUN;
PROC SORT DATA=EER_WL; BY ADM_RNO; RUN;
DATA EER_WL; MERGE EER_WL (IN=A) SUGWL0; BY ADM_RNO; IF A; RUN;
PROC SORT DATA=SUGWL1; BY ADM_RNO; RUN;
DATA EER_WL; MERGE EER_WL (IN=A) SUGWL1; BY ADM_RNO; IF A; RUN;
PROC SORT DATA=SUGWL2; BY ADM_RNO; RUN;
DATA EER_WL; MERGE EER_WL (IN=A) SUGWL2; BY ADM_RNO; IF A; RUN;
PROC SORT DATA=SUGWL4; BY ADM_RNO; RUN;
DATA EER_WL; MERGE EER_WL (IN=A) SUGWL4; BY ADM_RNO; IF A; RUN;

DATA EER_WL; SET EER_WL; 
IF SUGBYWL0="." THEN SUGBYWL0=0;
IF SUGBYWL1="." THEN SUGBYWL1=0;
IF SUGBYEXWL="." THEN SUGBYEXWL=0;
IF SUGRES="." THEN SUGRES=0;RUN; 
 
DATA EER_WL; SET EER_WL; 
SUGWL0TOKCAL = SUGBYWL0*4/KCALPERPERSON;
SUGWL1TOKCAL = SUGBYWL1*4/KCALPERPERSON;
SUGEXWLTOKCAL = SUGBYEXWL*4/KCALPERPERSON;
SUGRESTOKCAL = SUGRES*4/KCALPERPERSON;
TOTALSUG = SUGBYWL0+SUGBYWL1+SUGBYEXWL+SUGRES; RUN;

DATA EER_WL; SET EER_WL; 
SUGBYWL0PROP = SUGBYWL0/TOTALSUG;
SUGBYWL1PROP = SUGBYWL1/TOTALSUG;
SUGBYEXWLPROP = SUGBYEXWL/TOTALSUG;
SUGRESPROP = SUGRES/TOTALSUG;RUN; 

DATA EER_WL; SET EER_WL; 
TOTALSUGKCAL = FSDDSUG*4/FSDDEKC; RUN; 

*FREESUG*;
PROC SORT DATA=EER_WL; BY ADM_RNO; RUN;
PROC SORT DATA=FREESUGWL0; BY ADM_RNO; RUN;
DATA EER_WL; MERGE EER_WL (IN=A) FREESUGWL0; BY ADM_RNO; IF A; RUN;
PROC SORT DATA=FREESUGWL1; BY ADM_RNO; RUN;
DATA EER_WL; MERGE EER_WL (IN=A) FREESUGWL1; BY ADM_RNO; IF A; RUN;
PROC SORT DATA=FREESUGWL2; BY ADM_RNO; RUN;
DATA EER_WL; MERGE EER_WL (IN=A) FREESUGWL2; BY ADM_RNO; IF A; RUN;
PROC SORT DATA=FREESUGWL4; BY ADM_RNO; RUN;
DATA EER_WL; MERGE EER_WL (IN=A) FREESUGWL4; BY ADM_RNO; IF A; RUN;

DATA EER_WL; SET EER_WL; 
TOTALFREESUGTOKCAL = FSDDFRSUG*4/FSDDEKC; RUN;

DATA EER_WL; SET EER_WL;
IF FREESUGBYWL0="." THEN FREESUGBYWL0=0; 
IF FREESUGBYWL1="." THEN FREESUGBYWL1=0; 
IF FREESUGBYEXWL="." THEN FREESUGBYEXWL=0;
IF FREESUGRES="." THEN FREESUGRES=0; RUN;

DATA EER_WL; SET EER_WL; 
FREESUGWL0TOKCAL = FREESUGBYWL0*4/KCALPERPERSON;
FREESUGWL1TOKCAL = FREESUGBYWL1*4/KCALPERPERSON; 
FREESUGBYEXWLTOKCAL = FREESUGBYEXWL*4/KCALPERPERSON; 
FREESUGRESTOKCAL = FREESUGRES*4/KCALPERPERSON; RUN;

DATA EER_WL; SET EER_WL; 
FREESUGBYWL0PROP = FREESUGBYWL0/FSDDFRSUG; 
FREESUGBYWL1PROP = FREESUGBYWL1/FSDDFRSUG;
FREESUGBYEXWLPROP = FREESUGBYEXWL/FSDDFRSUG;
FREESUGRESPROP = FREESUGRES/FSDDFRSUG; RUN;

DATA EER_WL; SET EER_WL;
IF FSDDEKC=0 THEN DELETE; RUN;
DATA EER_WL; SET EER_WL; 
IF ADM_RNO THEN COUNT=1; RUN;


*******ENERGY AND NUTR INTAKES*******;
%MACRO NUTR (NAME=);
PROC SURVEYREG DATA=EER_WL VARMETHOD=BRR;
CLASS DHH_SEX MISREPORTER COUNT;
MODEL &NAME = COUNT DHH_SEX DHH_AGE MISREPORTER /SOLUTION;
WEIGHT FWGT; REPWEIGHTS BSW1-BSW500;
LSMEANS COUNT/MEANS CL;
RUN;
%MEND;

%NUTR (NAME=FASEXWLTOKCAL);  
%NUTR (NAME=FASWL0TOKCAL);  
%NUTR (NAME=FASWL1TOKCAL);  
%NUTR (NAME=FASRESTOKCAL);  
%NUTR (NAME=TOTALFASTOKCAL);  
%NUTR (NAME=TOTALFAS);  
 
%NUTR (NAME=SUGEXWLTOKCAL);  
%NUTR (NAME=SUGWL0TOKCAL);  
%NUTR (NAME=SUGWL1TOKCAL);  
%NUTR (NAME=SUGRESTOKCAL);  
%NUTR (NAME=TOTALSUGKCAL);  
%NUTR (NAME=TOTALSUG);  

%NUTR (NAME=FREESUGBYEXWLTOKCAL);  
%NUTR (NAME=FREESUGWL0TOKCAL);  
%NUTR (NAME=FREESUGWL1TOKCAL);  
%NUTR (NAME=FREESUGRESTOKCAL);  
%NUTR (NAME=FSDDFRSUG);  
%NUTR (NAME=TOTALFREESUGTOKCAL); 

%NUTR (NAME=KCALBYWL0);  
%NUTR (NAME=KCALBYWL1);  
%NUTR (NAME=KCALRES);  

%NUTR (NAME=KCALPERPERSON);  
%NUTR (NAME=KCALEXEMPTWL);  
%NUTR (NAME=KCAL1WL);  
%NUTR (NAME=KCAL2WL);  
%NUTR (NAME=KCAL3WL);  



*******SOD MACRO, INCLUDES TOTAL KCAL*;
%MACRO SOD (NAME=);
PROC SURVEYREG DATA=EER_WL VARMETHOD=BRR;
CLASS DHH_SEX MISREPORTER COUNT;
MODEL &NAME = COUNT DHH_SEX DHH_AGE MISREPORTER KCALPERPERSON/SOLUTION;
WEIGHT FWGT; REPWEIGHTS BSW1-BSW500;
LSMEANS COUNT/MEANS CL;
RUN;
%MEND;

%SOD (NAME=SODBYEXWL);  
%SOD (NAME=SODBYWL0);  
%SOD (NAME=SODBYWL1);  
%SOD (NAME=SODRES);   
%SOD (NAME=FSDDSOD);  
%SOD (NAME=TOTALSOD);   

************************************************************************************************;
************************************************************************************************;
************************************************************************************************;
************************************************************************************************;
********************************PARTICIPANT CHARACTERISTITCS************************************;

PROC SURVEYFREQ DATA=EER_WL; 
WEIGHT FWGT; REPWEIGHTS BSW1-BSW500;
TABLE DHH_SEX MBMI CCC_071 CCC_121 CCC_131 SMK_202 EDUG21 INCG2 INCGHH MISREPORTER; RUN;

PROC SURVEYMEANS DATA=EER_WL VARMETHOD=BRR;
WEIGHT FWGT; REPWEIGHTS BSW1-BSW500;
VAR DHH_AGE; RUN;

